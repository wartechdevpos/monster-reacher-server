// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: character.proto

package character

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CharacterClient is the client API for Character service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterClient interface {
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	SetName(ctx context.Context, in *SetNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetMMR(ctx context.Context, in *SetMMRRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	IncrementEXP(ctx context.Context, in *IncrementEXPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type characterClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterClient(cc grpc.ClientConnInterface) CharacterClient {
	return &characterClient{cc}
}

func (c *characterClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/character.Character/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) SetName(ctx context.Context, in *SetNameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/character.Character/SetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) SetMMR(ctx context.Context, in *SetMMRRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/character.Character/SetMMR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) IncrementEXP(ctx context.Context, in *IncrementEXPRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/character.Character/IncrementEXP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterServer is the server API for Character service.
// All implementations must embed UnimplementedCharacterServer
// for forward compatibility
type CharacterServer interface {
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	SetName(context.Context, *SetNameRequest) (*emptypb.Empty, error)
	SetMMR(context.Context, *SetMMRRequest) (*emptypb.Empty, error)
	IncrementEXP(context.Context, *IncrementEXPRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCharacterServer()
}

// UnimplementedCharacterServer must be embedded to have forward compatible implementations.
type UnimplementedCharacterServer struct {
}

func (UnimplementedCharacterServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedCharacterServer) SetName(context.Context, *SetNameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetName not implemented")
}
func (UnimplementedCharacterServer) SetMMR(context.Context, *SetMMRRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMMR not implemented")
}
func (UnimplementedCharacterServer) IncrementEXP(context.Context, *IncrementEXPRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementEXP not implemented")
}
func (UnimplementedCharacterServer) mustEmbedUnimplementedCharacterServer() {}

// UnsafeCharacterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterServer will
// result in compilation errors.
type UnsafeCharacterServer interface {
	mustEmbedUnimplementedCharacterServer()
}

func RegisterCharacterServer(s grpc.ServiceRegistrar, srv CharacterServer) {
	s.RegisterService(&Character_ServiceDesc, srv)
}

func _Character_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/character.Character/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_SetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).SetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/character.Character/SetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).SetName(ctx, req.(*SetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_SetMMR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMMRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).SetMMR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/character.Character/SetMMR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).SetMMR(ctx, req.(*SetMMRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_IncrementEXP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementEXPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).IncrementEXP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/character.Character/IncrementEXP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).IncrementEXP(ctx, req.(*IncrementEXPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Character_ServiceDesc is the grpc.ServiceDesc for Character service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Character_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "character.Character",
	HandlerType: (*CharacterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _Character_GetData_Handler,
		},
		{
			MethodName: "SetName",
			Handler:    _Character_SetName_Handler,
		},
		{
			MethodName: "SetMMR",
			Handler:    _Character_SetMMR_Handler,
		},
		{
			MethodName: "IncrementEXP",
			Handler:    _Character_IncrementEXP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "character.proto",
}
