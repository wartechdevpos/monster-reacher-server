// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: services_discovery.proto

package services_discovery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicesDiscoveryClient is the client API for ServicesDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesDiscoveryClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	HealthCheck(ctx context.Context, opts ...grpc.CallOption) (ServicesDiscovery_HealthCheckClient, error)
	CheckServiceIsOnline(ctx context.Context, in *CheckServiceIsOnlineRequest, opts ...grpc.CallOption) (*CheckServiceIsOnlineResponse, error)
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesresponse, error)
}

type servicesDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesDiscoveryClient(cc grpc.ClientConnInterface) ServicesDiscoveryClient {
	return &servicesDiscoveryClient{cc}
}

func (c *servicesDiscoveryClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/services_discovery.ServicesDiscovery/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesDiscoveryClient) HealthCheck(ctx context.Context, opts ...grpc.CallOption) (ServicesDiscovery_HealthCheckClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServicesDiscovery_ServiceDesc.Streams[0], "/services_discovery.ServicesDiscovery/HealthCheck", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesDiscoveryHealthCheckClient{stream}
	return x, nil
}

type ServicesDiscovery_HealthCheckClient interface {
	Send(*HealthCheckRequest) error
	Recv() (*HealthCheckResponse, error)
	grpc.ClientStream
}

type servicesDiscoveryHealthCheckClient struct {
	grpc.ClientStream
}

func (x *servicesDiscoveryHealthCheckClient) Send(m *HealthCheckRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *servicesDiscoveryHealthCheckClient) Recv() (*HealthCheckResponse, error) {
	m := new(HealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesDiscoveryClient) CheckServiceIsOnline(ctx context.Context, in *CheckServiceIsOnlineRequest, opts ...grpc.CallOption) (*CheckServiceIsOnlineResponse, error) {
	out := new(CheckServiceIsOnlineResponse)
	err := c.cc.Invoke(ctx, "/services_discovery.ServicesDiscovery/CheckServiceIsOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesDiscoveryClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesresponse, error) {
	out := new(GetServicesresponse)
	err := c.cc.Invoke(ctx, "/services_discovery.ServicesDiscovery/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesDiscoveryServer is the server API for ServicesDiscovery service.
// All implementations must embed UnimplementedServicesDiscoveryServer
// for forward compatibility
type ServicesDiscoveryServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	HealthCheck(ServicesDiscovery_HealthCheckServer) error
	CheckServiceIsOnline(context.Context, *CheckServiceIsOnlineRequest) (*CheckServiceIsOnlineResponse, error)
	GetServices(context.Context, *GetServicesRequest) (*GetServicesresponse, error)
	mustEmbedUnimplementedServicesDiscoveryServer()
}

// UnimplementedServicesDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedServicesDiscoveryServer struct {
}

func (UnimplementedServicesDiscoveryServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServicesDiscoveryServer) HealthCheck(ServicesDiscovery_HealthCheckServer) error {
	return status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedServicesDiscoveryServer) CheckServiceIsOnline(context.Context, *CheckServiceIsOnlineRequest) (*CheckServiceIsOnlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckServiceIsOnline not implemented")
}
func (UnimplementedServicesDiscoveryServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesresponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedServicesDiscoveryServer) mustEmbedUnimplementedServicesDiscoveryServer() {}

// UnsafeServicesDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesDiscoveryServer will
// result in compilation errors.
type UnsafeServicesDiscoveryServer interface {
	mustEmbedUnimplementedServicesDiscoveryServer()
}

func RegisterServicesDiscoveryServer(s grpc.ServiceRegistrar, srv ServicesDiscoveryServer) {
	s.RegisterService(&ServicesDiscovery_ServiceDesc, srv)
}

func _ServicesDiscovery_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesDiscoveryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services_discovery.ServicesDiscovery/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesDiscoveryServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesDiscovery_HealthCheck_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServicesDiscoveryServer).HealthCheck(&servicesDiscoveryHealthCheckServer{stream})
}

type ServicesDiscovery_HealthCheckServer interface {
	Send(*HealthCheckResponse) error
	Recv() (*HealthCheckRequest, error)
	grpc.ServerStream
}

type servicesDiscoveryHealthCheckServer struct {
	grpc.ServerStream
}

func (x *servicesDiscoveryHealthCheckServer) Send(m *HealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *servicesDiscoveryHealthCheckServer) Recv() (*HealthCheckRequest, error) {
	m := new(HealthCheckRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServicesDiscovery_CheckServiceIsOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckServiceIsOnlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesDiscoveryServer).CheckServiceIsOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services_discovery.ServicesDiscovery/CheckServiceIsOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesDiscoveryServer).CheckServiceIsOnline(ctx, req.(*CheckServiceIsOnlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesDiscovery_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesDiscoveryServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services_discovery.ServicesDiscovery/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesDiscoveryServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesDiscovery_ServiceDesc is the grpc.ServiceDesc for ServicesDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services_discovery.ServicesDiscovery",
	HandlerType: (*ServicesDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ServicesDiscovery_Register_Handler,
		},
		{
			MethodName: "CheckServiceIsOnline",
			Handler:    _ServicesDiscovery_CheckServiceIsOnline_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _ServicesDiscovery_GetServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HealthCheck",
			Handler:       _ServicesDiscovery_HealthCheck_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services_discovery.proto",
}
