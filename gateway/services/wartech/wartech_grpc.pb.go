// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: wartech.proto

package wartech

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WartechUserClient is the client API for WartechUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WartechUserClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Authentication(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
	CheckUserOrEmail(ctx context.Context, in *CheckUserOrEmailRequest, opts ...grpc.CallOption) (*CheckUserOrEmailResponse, error)
	ForgottenPassword(ctx context.Context, in *ForgottenPasswordRequest, opts ...grpc.CallOption) (*ForgottenPasswordResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...grpc.CallOption) (*ConfirmEmailResponse, error)
}

type wartechUserClient struct {
	cc grpc.ClientConnInterface
}

func NewWartechUserClient(cc grpc.ClientConnInterface) WartechUserClient {
	return &wartechUserClient{cc}
}

func (c *wartechUserClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/wartech.WartechUser/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wartechUserClient) Authentication(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := c.cc.Invoke(ctx, "/wartech.WartechUser/Authentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wartechUserClient) CheckUserOrEmail(ctx context.Context, in *CheckUserOrEmailRequest, opts ...grpc.CallOption) (*CheckUserOrEmailResponse, error) {
	out := new(CheckUserOrEmailResponse)
	err := c.cc.Invoke(ctx, "/wartech.WartechUser/CheckUserOrEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wartechUserClient) ForgottenPassword(ctx context.Context, in *ForgottenPasswordRequest, opts ...grpc.CallOption) (*ForgottenPasswordResponse, error) {
	out := new(ForgottenPasswordResponse)
	err := c.cc.Invoke(ctx, "/wartech.WartechUser/ForgottenPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wartechUserClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, "/wartech.WartechUser/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wartechUserClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/wartech.WartechUser/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wartechUserClient) ConfirmEmail(ctx context.Context, in *ConfirmEmailRequest, opts ...grpc.CallOption) (*ConfirmEmailResponse, error) {
	out := new(ConfirmEmailResponse)
	err := c.cc.Invoke(ctx, "/wartech.WartechUser/ConfirmEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WartechUserServer is the server API for WartechUser service.
// All implementations must embed UnimplementedWartechUserServer
// for forward compatibility
type WartechUserServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Authentication(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error)
	CheckUserOrEmail(context.Context, *CheckUserOrEmailRequest) (*CheckUserOrEmailResponse, error)
	ForgottenPassword(context.Context, *ForgottenPasswordRequest) (*ForgottenPasswordResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	ConfirmEmail(context.Context, *ConfirmEmailRequest) (*ConfirmEmailResponse, error)
	mustEmbedUnimplementedWartechUserServer()
}

// UnimplementedWartechUserServer must be embedded to have forward compatible implementations.
type UnimplementedWartechUserServer struct {
}

func (UnimplementedWartechUserServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedWartechUserServer) Authentication(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authentication not implemented")
}
func (UnimplementedWartechUserServer) CheckUserOrEmail(context.Context, *CheckUserOrEmailRequest) (*CheckUserOrEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserOrEmail not implemented")
}
func (UnimplementedWartechUserServer) ForgottenPassword(context.Context, *ForgottenPasswordRequest) (*ForgottenPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgottenPassword not implemented")
}
func (UnimplementedWartechUserServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedWartechUserServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedWartechUserServer) ConfirmEmail(context.Context, *ConfirmEmailRequest) (*ConfirmEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEmail not implemented")
}
func (UnimplementedWartechUserServer) mustEmbedUnimplementedWartechUserServer() {}

// UnsafeWartechUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WartechUserServer will
// result in compilation errors.
type UnsafeWartechUserServer interface {
	mustEmbedUnimplementedWartechUserServer()
}

func RegisterWartechUserServer(s grpc.ServiceRegistrar, srv WartechUserServer) {
	s.RegisterService(&WartechUser_ServiceDesc, srv)
}

func _WartechUser_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WartechUserServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wartech.WartechUser/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WartechUserServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WartechUser_Authentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WartechUserServer).Authentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wartech.WartechUser/Authentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WartechUserServer).Authentication(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WartechUser_CheckUserOrEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserOrEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WartechUserServer).CheckUserOrEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wartech.WartechUser/CheckUserOrEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WartechUserServer).CheckUserOrEmail(ctx, req.(*CheckUserOrEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WartechUser_ForgottenPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgottenPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WartechUserServer).ForgottenPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wartech.WartechUser/ForgottenPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WartechUserServer).ForgottenPassword(ctx, req.(*ForgottenPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WartechUser_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WartechUserServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wartech.WartechUser/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WartechUserServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WartechUser_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WartechUserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wartech.WartechUser/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WartechUserServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WartechUser_ConfirmEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WartechUserServer).ConfirmEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wartech.WartechUser/ConfirmEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WartechUserServer).ConfirmEmail(ctx, req.(*ConfirmEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WartechUser_ServiceDesc is the grpc.ServiceDesc for WartechUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WartechUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wartech.WartechUser",
	HandlerType: (*WartechUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _WartechUser_Register_Handler,
		},
		{
			MethodName: "Authentication",
			Handler:    _WartechUser_Authentication_Handler,
		},
		{
			MethodName: "CheckUserOrEmail",
			Handler:    _WartechUser_CheckUserOrEmail_Handler,
		},
		{
			MethodName: "ForgottenPassword",
			Handler:    _WartechUser_ForgottenPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _WartechUser_ChangePassword_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _WartechUser_GetUser_Handler,
		},
		{
			MethodName: "ConfirmEmail",
			Handler:    _WartechUser_ConfirmEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wartech.proto",
}
