// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: profile.proto

package profile

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfileClient is the client API for Profile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileClient interface {
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	Authentication(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	AuthenticationByService(ctx context.Context, in *AuthenticationByServiceRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	RegisterByService(ctx context.Context, in *RegisterByServiceRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	UserIsValid(ctx context.Context, in *UserIsValidRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	NameIsValid(ctx context.Context, in *NameIsValidRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	ChangeName(ctx context.Context, in *ChangeNameRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	AddServiceAuth(ctx context.Context, in *AddServiceAuthRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	RemoveServiceAuth(ctx context.Context, in *RemoveServiceAuthRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	MergeData(ctx context.Context, in *MergeDataRequest, opts ...grpc.CallOption) (*MergeDataResponse, error)
}

type profileClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileClient(cc grpc.ClientConnInterface) ProfileClient {
	return &profileClient{cc}
}

func (c *profileClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) Authentication(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/Authentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) AuthenticationByService(ctx context.Context, in *AuthenticationByServiceRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/AuthenticationByService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) RegisterByService(ctx context.Context, in *RegisterByServiceRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/RegisterByService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) UserIsValid(ctx context.Context, in *UserIsValidRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/UserIsValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) NameIsValid(ctx context.Context, in *NameIsValidRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/NameIsValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) ChangeName(ctx context.Context, in *ChangeNameRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/ChangeName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) AddServiceAuth(ctx context.Context, in *AddServiceAuthRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/AddServiceAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) RemoveServiceAuth(ctx context.Context, in *RemoveServiceAuthRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/RemoveServiceAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileClient) MergeData(ctx context.Context, in *MergeDataRequest, opts ...grpc.CallOption) (*MergeDataResponse, error) {
	out := new(MergeDataResponse)
	err := c.cc.Invoke(ctx, "/profile.Profile/MergeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServer is the server API for Profile service.
// All implementations must embed UnimplementedProfileServer
// for forward compatibility
type ProfileServer interface {
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	Authentication(context.Context, *AuthenticationRequest) (*SuccessResponse, error)
	AuthenticationByService(context.Context, *AuthenticationByServiceRequest) (*SuccessResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	RegisterByService(context.Context, *RegisterByServiceRequest) (*RegisterResponse, error)
	UserIsValid(context.Context, *UserIsValidRequest) (*SuccessResponse, error)
	NameIsValid(context.Context, *NameIsValidRequest) (*SuccessResponse, error)
	ChangeName(context.Context, *ChangeNameRequest) (*SuccessResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*SuccessResponse, error)
	AddServiceAuth(context.Context, *AddServiceAuthRequest) (*SuccessResponse, error)
	RemoveServiceAuth(context.Context, *RemoveServiceAuthRequest) (*SuccessResponse, error)
	MergeData(context.Context, *MergeDataRequest) (*MergeDataResponse, error)
	mustEmbedUnimplementedProfileServer()
}

// UnimplementedProfileServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServer struct {
}

func (UnimplementedProfileServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedProfileServer) Authentication(context.Context, *AuthenticationRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authentication not implemented")
}
func (UnimplementedProfileServer) AuthenticationByService(context.Context, *AuthenticationByServiceRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationByService not implemented")
}
func (UnimplementedProfileServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedProfileServer) RegisterByService(context.Context, *RegisterByServiceRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByService not implemented")
}
func (UnimplementedProfileServer) UserIsValid(context.Context, *UserIsValidRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIsValid not implemented")
}
func (UnimplementedProfileServer) NameIsValid(context.Context, *NameIsValidRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameIsValid not implemented")
}
func (UnimplementedProfileServer) ChangeName(context.Context, *ChangeNameRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeName not implemented")
}
func (UnimplementedProfileServer) ChangePassword(context.Context, *ChangePasswordRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedProfileServer) AddServiceAuth(context.Context, *AddServiceAuthRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServiceAuth not implemented")
}
func (UnimplementedProfileServer) RemoveServiceAuth(context.Context, *RemoveServiceAuthRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveServiceAuth not implemented")
}
func (UnimplementedProfileServer) MergeData(context.Context, *MergeDataRequest) (*MergeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeData not implemented")
}
func (UnimplementedProfileServer) mustEmbedUnimplementedProfileServer() {}

// UnsafeProfileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServer will
// result in compilation errors.
type UnsafeProfileServer interface {
	mustEmbedUnimplementedProfileServer()
}

func RegisterProfileServer(s grpc.ServiceRegistrar, srv ProfileServer) {
	s.RegisterService(&Profile_ServiceDesc, srv)
}

func _Profile_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_Authentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Authentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/Authentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Authentication(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_AuthenticationByService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationByServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).AuthenticationByService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/AuthenticationByService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).AuthenticationByService(ctx, req.(*AuthenticationByServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_RegisterByService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterByServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).RegisterByService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/RegisterByService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).RegisterByService(ctx, req.(*RegisterByServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_UserIsValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIsValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).UserIsValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/UserIsValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).UserIsValid(ctx, req.(*UserIsValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_NameIsValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameIsValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).NameIsValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/NameIsValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).NameIsValid(ctx, req.(*NameIsValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_ChangeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).ChangeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/ChangeName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).ChangeName(ctx, req.(*ChangeNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_AddServiceAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).AddServiceAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/AddServiceAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).AddServiceAuth(ctx, req.(*AddServiceAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_RemoveServiceAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServiceAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).RemoveServiceAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/RemoveServiceAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).RemoveServiceAuth(ctx, req.(*RemoveServiceAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profile_MergeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServer).MergeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.Profile/MergeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServer).MergeData(ctx, req.(*MergeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Profile_ServiceDesc is the grpc.ServiceDesc for Profile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Profile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.Profile",
	HandlerType: (*ProfileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _Profile_GetData_Handler,
		},
		{
			MethodName: "Authentication",
			Handler:    _Profile_Authentication_Handler,
		},
		{
			MethodName: "AuthenticationByService",
			Handler:    _Profile_AuthenticationByService_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Profile_Register_Handler,
		},
		{
			MethodName: "RegisterByService",
			Handler:    _Profile_RegisterByService_Handler,
		},
		{
			MethodName: "UserIsValid",
			Handler:    _Profile_UserIsValid_Handler,
		},
		{
			MethodName: "NameIsValid",
			Handler:    _Profile_NameIsValid_Handler,
		},
		{
			MethodName: "ChangeName",
			Handler:    _Profile_ChangeName_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Profile_ChangePassword_Handler,
		},
		{
			MethodName: "AddServiceAuth",
			Handler:    _Profile_AddServiceAuth_Handler,
		},
		{
			MethodName: "RemoveServiceAuth",
			Handler:    _Profile_RemoveServiceAuth_Handler,
		},
		{
			MethodName: "MergeData",
			Handler:    _Profile_MergeData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile.proto",
}
